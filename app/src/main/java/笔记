1，引入ButterKnife 框架
    ButterKnife 用来代替findViewById 获取页面控件的

2020/6/25
1，获取拼多多产品分类
2，Fragment 嵌套 Fragment
3，GridView的使用
4，LabelsView 第三方控件 https://github.com/donkingliang/LabelsView 标签列表控件
    1、引入依赖 在Project的build.gradle在添加以下代码
        allprojects {
            repositories {
                ...
                maven { url 'https://jitpack.io' }
            }
        }

        在Module的build.gradle在添加以下代码

        dependencies {
            implementation 'com.github.donkingliang:LabelsView:1.6.1'
        }
    2、编写布局：
       <com.donkingliang.labels.LabelsView
           xmlns:app="http://schemas.android.com/apk/res-auto"
           android:id="@+id/labels"
           android:layout_width="match_parent"
           android:layout_height="wrap_content"
           app:labelBackground="@drawable/label_bg"     //标签的背景
           app:labelTextColor="@drawable/label_text_color" //标签的字体颜色 可以是一个颜色值
           app:labelTextSize="14sp"      //标签的字体大小
           app:labelTextPaddingBottom="5dp"   //标签的上下左右边距
           app:labelTextPaddingLeft="10dp"
           app:labelTextPaddingRight="10dp"
           app:labelTextPaddingTop="5dp"
           app:lineMargin="10dp"   //行与行的距离
           app:wordMargin="10dp"   //标签与标签的距离
           app:selectType="SINGLE"   //标签的选择类型 有单选(可反选)、单选(不可反选)、多选、不可选四种类型
           app:maxLines="3"    // 设置最大显示行数，小于等于0则不限行数。
           app:maxSelect="5"   //标签的最大选择数量，只有多选的时候才有用，0为不限数量
           app:minSelect="1"   //标签的最少选择数量，只有多选的时候才有用，0为不限数量
           app:isIndicator="true" />   //设置为指示器模式，不能手动改变标签的选中状态

            <!-- 其他属性 -->
            app:labelTextWidth="wrap_content"  // 标签项宽
            app:labelTextHeight="wrap_content"  // 标签项高
            app:labelGravity="center"  // 标签项的文本显示方向
            app:labelTextPadding="5dp"  // 标签的Padding
            app:singleLine="true"  // 单行显示，默认false

          这里有两个地方需要说明一下：

          1）标签的正常样式和选中样式是通过drawable来实现的。比如下面两个drawable。

          <!-- 标签的背景 label_bg -->
          <selector xmlns:android="http://schemas.android.com/apk/res/android">
              <!-- 标签选中时的背景 -->
              <item android:state_selected="true">
                  <shape>
                      <stroke android:width="2dp" android:color="#fb435b" />
                      <corners android:radius="8dp" />
                      <solid android:color="@android:color/white" />
                  </shape>
              </item>
              <!-- 标签的正常背景 -->
              <item>
                  <shape>
                      <stroke android:width="2dp" android:color="#656565" />
                      <corners android:radius="8dp" />
                      <solid android:color="@android:color/white" />
                  </shape>
              </item>
          </selector>
          <!-- 标签的文字颜色 label_text_color -->
          <selector xmlns:android="http://schemas.android.com/apk/res/android">
              <!-- 标签选中时的文字颜色 -->
              <item android:color="#fb435b" android:state_selected="true" />
              <!-- 标签的正常文字颜色 -->
              <item android:color="#2d2b2b" />
          </selector>
        TextView的textColor属性除了可以设置一个颜色值以外，也可以通过资源来设置的，这一点很多同学都不知道。

        2）标签的选择类型有四种：

        NONE ：标签不可选中，也不响应选中事件监听，这是默认值。

        SINGLE：单选(可反选)。这种模式下，可以一个也不选。

        SINGLE_IRREVOCABLY：单选(不可反选)。这种模式下，有且只有一个是选中的。默认是第一个。

        MULTI：多选，可以通过设置maxSelect限定选择的最大数量，0为不限数量。maxSelect只有在多选的时候才有效。多选模式下可以设置一些标签为必选项。必选项的标签默认选中，且不能取消。

        3、设置标签：

        labelsView = (LabelsView) findViewById(labels);
        ArrayList<String> label = new ArrayList<>();
        label.add("Android");
        label.add("IOS");
        label.add("前端");
        label.add("后台");
        label.add("微信开发");
        label.add("游戏开发");
        labelsView.setLabels(label); //直接设置一个字符串数组就可以了。

        //LabelsView可以设置任何类型的数据，而不仅仅是String。
        ArrayList<TestBean> testList = new ArrayList<>();
        testList.add(new TestBean("Android",1));
        testList.add(new TestBean("IOS",2));
        testList.add(new TestBean("前端",3));
        testList.add(new TestBean("后台",4));
        testList.add(new TestBean("微信开发",5));
        testList.add(new TestBean("游戏开发",6));
        labelsView.setLabels(testList, new LabelsView.LabelTextProvider<TestBean>() {
            @Override
            public CharSequence getLabelText(TextView label, int position, TestBean data) {

                // label就是标签项，在这里可以对标签项单独设置一些属性，比如文本样式等。

                //根据data和position返回label需要显示的数据。
                return data.getName();
            }
        });
        4、设置事件监听：(如果需要的话)

        //标签的点击监听
        labelsView.setOnLabelClickListener(new LabelsView.OnLabelClickListener() {
            @Override
            public void onLabelClick(TextView label, Object data, int position) {
                 //label是被点击的标签，data是标签所对应的数据，position是标签的位置。
            }
        });
        //标签的选中监听
        labelsView.setOnLabelSelectChangeListener(new LabelsView.OnLabelSelectChangeListener() {
            @Override
            public void onLabelSelectChange(TextView label, Object data, boolean isSelect, int position) {
                //label是被选中的标签，data是标签所对应的数据，isSelect是是否选中，position是标签的位置。
            }
        });
        5、设置标签选中事件拦截：(如果需要的话)

        当希望某个标签在特定条件下不被选中/取消选中时，可以使用事件拦截。只有用户点击改变标签选中状态时才会回调拦截，用其他方法改变时不会回调这个方法，不会被拦截。点击选中/取消选中时，拦截事件，返回true时，表示事件被拦截，不会改变标签的选中状态。

        //设置标签选中状态的点击改变拦截器
        labelsView.setOnSelectChangeIntercept(new LabelsView.OnSelectChangeIntercept() {
            @Override
            public boolean onIntercept(TextView label, Object data, boolean oldSelect, boolean newSelect, int position) {
                if (position == 0){
                    //拦截第一个标签的状态改变事件，不能选中和反选
                    return true;
                } else {
                    return false;
                }
            }
        });
        6、常用方法

        //设置选中标签。
        //positions是个可变类型，表示被选中的标签的位置。
        //比喻labelsView.setSelects(1,2,5);选中第1,3,5个标签。如果是单选的话，只有第一个参数有效。
        public void setSelects(int... positions);
        public void setSelects(List<Integer> positions)；

        //获取选中的标签(返回的是所有选中的标签的位置)。返回的是一个Integer的数组，表示被选中的标签的下标。如果没有选中，数组的size等于0。
        public ArrayList<Integer> getSelectLabels();
        //获取选中的label(返回的是所有选中的标签的数据)。如果没有选中，数组的size等于0。T表示标签的数据类型。
        public <T> List<T> getSelectLabelDatas();

        //取消所有选中的标签。
        public void clearAllSelect();

        //设置标签的选择类型，有NONE、SINGLE、SINGLE_IRREVOCABLY和MULTI四种类型。
        public void setSelectType(SelectType selectType);

        //设置最大的选择数量，只有selectType等于MULTI时有效。
        public void setMaxSelect(int maxSelect);

        //设置最少的选择数量，只有selectType等于MULTI时有效。
        //注意：minSelect只限制用户手动点击取消选中时的效果。调用setSelects()、clearAllSelect()等方法改变标签的选中状态时，不受minSelect影响。
        public void setMinSelect(int minSelect);

        //设置为指示器模式，只能看，不能手动操作。这种模式下，用户不能通过手动点击改变标签的选中状态。
        //但是仍然可以通过调用setSelects()、clearAllSelect()等方法改变标签的选中状态。
        public void setIndicator(boolean indicator)

        //设置必选项，只有在多项模式下，这个方法才有效
        public void setCompulsorys(int... positions)
        public void setCompulsorys(List<Integer> positions)

        //清空必选项，只有在多项模式下，这个方法才有效
        public void clearCompulsorys()

        //设置标签背景
        public void setLabelBackgroundResource(int resId);

        //设置标签的文字颜色
        public void setLabelTextColor(int color);
        public void setLabelTextColor(ColorStateList color);

        //设置标签的文字大小（单位是px）
        public void setLabelTextSize(float size);

        //设置标签内边距
        public void setLabelTextPadding(int left, int top, int right, int bottom);

        //设置行间隔
        public void setLineMargin(int margin);

        //设置标签的间隔
        public void setWordMargin(int margin);

        // 设置最大显示行数，小于等于0则不限行数。
        public void setMaxLines(int maxLines);

        // 设置标签文本显示方向
        public void setLabelGravity(int gravity)；

        // 设置是否单行显示
        public void setMaxLines(int maxLines)；

2020/7/1

2020/7/20
    項目迁移到AndroidX包下
    第一步：适配我们项目的Android版本 compileSdkVersion，targetSdkVersion
    第二步：build.gradle 文件下，导入androidX相关的包，替换掉原来的包
        主要就是以下几个
                implementation 'androidx.appcompat:appcompat:1.1.0'
                implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
                testImplementation 'junit:junit:4.13'
                androidTestImplementation 'androidx.test:runner:1.2.0'
                androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
                implementation 'androidx.recyclerview:recyclerview:1.2.0-alpha04'
    第三部：替换掉之前用到v7和v4包的类,可以使用全局替换
        1，Fragment
        2，RecyclerView
        3, ViewPager
        4, NonNull和Nullable
        特别注意，我们Java文件下改了之后，xml文件也是需要修改的
    第四步：gradle.properties 文件中加
            android.useAndroidX=true
            android.enableJetifier=true

    第三方Banner的使用
        项目链接：https://github.com/youth5201314/banner

2020/8/10
    广播机制
    1，标准广播和有序广播
    2，广播注册的两种方式（静态注册，动态注册）
    3，发送广播（发送标准广播和发送有序广播）
        静态广播发送广播时，需要注意要setClassName为自定义Receive的类
    4，广播的应用场景
        a, 接受推送消息
        b，刷新数据
        c, 强制下线
        等等！
gitee 项目地址：https://gitee.com/daluzy/daluzy_project.git


2020/8/12
    1 Bmob后端云的集成
       http://doc.bmob.cn/data/android/
       注册
       登录

2020/8/24
    项目链接：https://gitee.com/daluzy/daluzy_project
    OkHttp3
    原生适用HttpURLConnection请求（HttpTools这个类有实例）


    Service
        1，本地服务
        2，远程服务
        Android开发者链接： http://www.android-doc.com/guide/components/services.html
        Android API：https://developer.android.google.cn/reference/android/app/Service#startForeground(int,%20android.app.Notification)

      一，不同的启动方式，不同的生命周期
      二，Android P  以后需要Manifest.permission.FOREGROUND_SERVICE 权限
      三，Android 6 以前Service start 以后是一直运行在后台的，即使application销毁了service还是在运行中，Android6.0以上service是随着application销毁而销毁的
      四，Service 也是运行在主线程里面（UI线程）的
      五，Activity bindService 之后，需要在activity中的onDestroy()中unBindService()
      六，Service 随着绑定的所有Activity销毁而销毁


    Kotlin 和 java 那个比较适用


